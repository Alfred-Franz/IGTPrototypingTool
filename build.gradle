import com.github.spotbugs.SpotBugsTask

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.6.4/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building a CLI application
    id 'application'

    // Checkstyle enforces consistent formatting rules across the project.
    id 'checkstyle'

    // Spotbugs is a static analyzer for java
    id 'com.github.spotbugs' version '2.0.1'
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// Run in Java 8 mode due to dependency compatibility issues
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

dependencies {
    implementation 'org.hamcrest:hamcrest-core:1.3'
    implementation 'com.massisframework.jme3:jme3-core:3.1.0-beta2'
    implementation 'org.apache.commons:commons-math3:3.6.1'
    implementation 'gov.nist.math:jama:1.0.2'
    implementation 'com.neuronrobotics:java-bowler:3.27.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}

application {
    // Define the main class for the application
    mainClassName = 'mainMethod.Main'
}

checkstyle {
    configFile = rootProject.file('config/checkstyle/checkstyle.xml')
    toolVersion = '8.25'
}

tasks.withType(Checkstyle) {
    // Don't make checkstyle warnings fatal.  This needs to be removed once the
    // code is cleaned up and checkstyle doesn't have any complaints.
    ignoreFailures = true
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

tasks.withType(SpotBugsTask) {
    ignoreFailures = true
    reports {
        xml.enabled = false
        html.enabled = true
    }
}
